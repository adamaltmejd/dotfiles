#!/usr/local/bin/zsh

antibody_update() {
    antibody bundle < ~/.adamaltmejd/zsh-plugins > ~/.zsh_plugins.sh
    antibody update
}

# Echo in Stderr
echoerr() { printf "%s\n" "$*" >&2 }

# Update all stuff that I use
alias update_script="update_script_echo > ~/.adamaltmejd/update_script.log"

update_script_echo() {
    # echoerr "Starting system update..."
    # # Ask for the administrator password upfront
    # sudo -v
    # # Keep-alive: update existing `sudo` time stamp until finish
    # while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    # # Mac App store update
    # # (don't update automatically)
    # sudo softwareupdate -i -a 2>&1

    echoerr "Updating brew"
    brew update && brew upgrade
    brew cask upgrade
    brew cleanup

    # Update zsh shell
    echoerr "Updating ZSH"
    antibody_update 2>&1

    # Reload to use latest version for the rest of the update
    source ~/.zshrc

    echoerr "Updating core Python packages"
    export PIP_REQUIRE_VIRTUALENV=false
    python3 -m pip install --upgrade pip setuptools wheel virtualenv virtualenvwrapper
    export PIP_REQUIRE_VIRTUALENV=true

    echoerr "Updating NPM"
    npm install -g npm@latest 2>&1
    for package in $(npm -g outdated --parseable --depth=0 | cut -d: -f2)
    do
        npm -g install "$package" 2>&1
    done

    # Rubygems (ruby and rbenv are updated through brew)
    echoerr "Updating ruby gems"
    eval "$(rbenv init -)" # Make sure rbenv is initialized (lazy loading ON)
    gem update --system
    gem update

    echoerr "Updating R"
    # If errors occur, follow install script here:
    # http://luisspuerto.net/2018/01/install-r-100-homebrew-edition-with-openblas-openmp-my-version/
    Rscript --vanilla -e "update.packages(.libPaths()[1], ask=FALSE, checkBuilt=TRUE, repos = 'https://cran.rstudio.com/')" 2>&1

    mv ~/.R/Makevars ~/.R/Makevars_debug
    cp -f ~/.R/Makevars-data-table ~/.R/Makevars
    Rscript --vanilla -e 'remove.packages("data.table"); install.packages("data.table", type = "source", repos = "http://Rdatatable.github.io/data.table")' 2>&1
    rm ~/.R/Makevars
    mv ~/.R/Makevars_debug ~/.R/Makevars

    # Update Latex
	echoerr "Updating LaTeX"
	sudo tlmgr update --self --all

    echoerr "update_script finished!"

    # Reload terminal
    source ~/.zshrc
}

# Pandoc pdf build
# --template=cv.template \
# --variable=vc-git \
# --csl=${3:-"~/.adamaltmejd/pandoc/test.csl"} \
#
#--bibliography=${2:-"$HOME/Dropbox/Reading/Library/library.bib"} \
#--csl=${3:-"$HOME/Dropbox/Sync/dotfiles/.adamaltmejd/pandoc/chicago-author-date-adam.csl"} \
function pandoc-pdf() {
    pandoc \
        --from markdown+yaml_metadata_block+header_attributes-blank_before_header \
        --to latex \
        --latex-engine=pdflatex \
        --filter pandoc-citeproc \
        --smart \
        --standalone \
        --output "${1%.md}.pdf" \
        $1
}

function pi() {
    # Connect to pi.local if its available, otherwise to pi.remote
    if ping -c1 -W3 pi.local >/dev/null 2>&1
    then
        ssh pi.l
    else
        ssh pi.r
    fi
}

function send_torrent_to_pi() {
	scp "${1}" deluge@pi.r:/media/data/torrents/drop-folder/
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# `c`: VS Code
function c() {
	if [ $# -eq 0 ]; then
		code .;
	else
		code "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Gpip to install python packages globally
function gpip3() {
    PIP_REQUIRE_VIRTUALENV="0" pip3 "$@"
}
